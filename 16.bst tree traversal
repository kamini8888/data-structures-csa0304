#include<stdio.h>  
#include<stdlib.h>  
  
struct node  
{  
    int data;  
    struct node *left;  
    struct node *right;  
}*root = NULL,*newnode;
struct node*insert(struct node*root,int ele) {
	   if(root == NULL) {
  newnode = (struct node*) malloc(sizeof(struct node));

   newnode->data = ele;
   newnode->left = NULL;
   newnode->right = NULL;
   return(newnode);
   }  
  
      else if(ele<root->data)  
       root->left = insert(root->left,ele);  
  
     else if(ele>root->data)  
       root->right = insert(root->right,ele);  
  
     return root;  
}  
  

void inorder(struct node* root) {
   if(root != NULL) {
      inorder(root->left);
      printf("%d ",root->data);          
      inorder(root->right);
   }
}

void preorder(struct node* root) {
   if(root != NULL) {
      printf("%d ",root->data);
      preorder(root->left);
      preorder(root->right);
   }
}
void postorder(struct node* root) {
   if(root != NULL) {
      postorder(root->left);
      postorder(root->right);
      printf("%d ", root->data);
   }
}
  
int main()  
{  
   struct node *root = NULL;  
  
  
    int data;  
    char ch; 
        while(1)     
        {  
            printf("\nmain menu::");  
            printf("\n1. insert\n2. Inorder Traversal.\n3. preorder Traversal.\n4. postorder Traversal.\n5.exit\n");  
             
  
            int choice;  
            scanf("%d",&choice);              
            switch (choice)  
            {  
            case 1 :   
                printf("\nEnter the value to be inserted\n");  
                scanf("%d",&data);  
                root = insert(root,data);                    
                break;                            
            case 2 :   
                printf("\nInorder Traversal of the Binary Tree::\n");  
                inorder(root);  
                break;  
		    case 3:
			   printf("\npreorder Traversal of the Binary Tree::\n");
			   preorder(root);
			   break;
			case 4:
				printf("\npostorder Traversal of the Binary Tree::\n");
                postorder(root);      
                break; 
            case 5:
                exit(0); 
            default :   
                printf("Wrong Entry\n");  
                    
            }  
                          
        } 
}  
